{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMoAa82yhH1HXy7b1WURJwW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lpaolariosm/Ecuaciones-Diferenciales-Parciales-I/blob/main/Gr%C3%A1ficas%20de%20la%20actividad\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "vMfmqEeQ5Yij"
      },
      "outputs": [],
      "source": [
        "from sympy import fourier_series, pi, plot, Piecewise, exp\n",
        "from sympy.abc import x"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir la función por partes en el intervalo [-pi, pi]\n",
        "f = Piecewise(\n",
        "    (1, (x >= 0) & (x <= pi/2)),\n",
        "    (2, (x > pi/2) & (x <= pi))\n",
        ")"
      ],
      "metadata": {
        "id": "D13E2zlp5aF2"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Graficar la función original\n",
        "plot(f, (x, -pi, pi), line_color='blue')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "hduASUke5kmu",
        "outputId": "f4af9e19-0ded-492d-b7d5-f8fe36a2a4d8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sympy.plotting.backends.matplotlibbackend.matplotlib.MatplotlibBackend at 0x7a680490de90>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular la serie de Fourier en el intervalo [-pi, pi]\n",
        "s = fourier_series(f, (x, -pi, pi))\n",
        "s1 = s.truncate(n = 3)\n",
        "s2 = s.truncate(n = 5)\n",
        "s3 = s.truncate(n = 7)\n",
        "p = plot(f, s1, s2, s3, (x, -pi, pi), show=False, legend=True)"
      ],
      "metadata": {
        "id": "_ykemCex5oGl"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "BUV_I0GT5wpt",
        "outputId": "65b7b5e7-c554-49b5-f323-e6ab1f1c8b2e"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FourierSeries(Piecewise((1, (x >= 0) & (x <= pi/2)), (2, (x <= pi) & (x > pi/2))), (x, -pi, pi), (nan, SeqFormula(nan, (_n, 1, oo)), SeqFormula(nan, (_n, 1, oo))))"
            ],
            "text/latex": "$\\displaystyle \\text{NaN} + \\ldots$"
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p[0].label = 'x'\n",
        "p[1].label = 'n=3'\n",
        "p[2].label = 'n=5'\n",
        "p[3].label = 'n=7'"
      ],
      "metadata": {
        "id": "A97Bjdkf6CyF"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "p.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "WIXIE4Cq6HDF",
        "outputId": "682e137e-4e48-4c89-f173-014f768f3c3d"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sympy import fourier_series, pi, plot, Piecewise, sin, symbols, integrate\n",
        "from sympy.abc import y, n"
      ],
      "metadata": {
        "id": "uL_GeAN36UDF"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir la función f(y) = e^(2y)\n",
        "f = exp(2*y)\n"
      ],
      "metadata": {
        "id": "7Kit2tIR6zvZ"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir la función en el intervalo [0,1]\n",
        "f = Piecewise((exp(2*x), (x >= 0) & (x <= 1)))"
      ],
      "metadata": {
        "id": "Kfqtv-TF9Ji7"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Coeficientes de la serie de Fourier en senos\n",
        "L = 1  # Periodo simétrico [-1,1]\n",
        "b_n = (2/L) * integrate(exp(2*y) * sin(n * pi * y / L), (y, 0, L))"
      ],
      "metadata": {
        "id": "QH5i8MD77Gs1"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Construir la serie de Fourier en senos hasta un cierto número de términos\n",
        "N = 5  # Número de términos\n",
        "serie_senos = sum(b_n.subs(n, k) * sin(k * pi * y / L) for k in range(1, N+1))"
      ],
      "metadata": {
        "id": "OhzPJCv57WuU"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "serie_senos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 100
        },
        "id": "ftMC2Wao8FOM",
        "outputId": "74b04000-b4d8-4640-cbd1-00cd74a4a140"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2.0*pi/(4 + pi**2) + 2.0*pi*exp(2)/(4 + pi**2))*sin(pi*y) + (-4.0*pi*exp(2)/(4 + 4*pi**2) + 4.0*pi/(4 + 4*pi**2))*sin(2*pi*y) + (6.0*pi/(4 + 9*pi**2) + 6.0*pi*exp(2)/(4 + 9*pi**2))*sin(3*pi*y) + (-8.0*pi*exp(2)/(4 + 16*pi**2) + 8.0*pi/(4 + 16*pi**2))*sin(4*pi*y) + (10.0*pi/(4 + 25*pi**2) + 10.0*pi*exp(2)/(4 + 25*pi**2))*sin(5*pi*y)"
            ],
            "text/latex": "$\\displaystyle \\left(\\frac{2.0 \\pi}{4 + \\pi^{2}} + \\frac{2.0 \\pi e^{2}}{4 + \\pi^{2}}\\right) \\sin{\\left(\\pi y \\right)} + \\left(- \\frac{4.0 \\pi e^{2}}{4 + 4 \\pi^{2}} + \\frac{4.0 \\pi}{4 + 4 \\pi^{2}}\\right) \\sin{\\left(2 \\pi y \\right)} + \\left(\\frac{6.0 \\pi}{4 + 9 \\pi^{2}} + \\frac{6.0 \\pi e^{2}}{4 + 9 \\pi^{2}}\\right) \\sin{\\left(3 \\pi y \\right)} + \\left(- \\frac{8.0 \\pi e^{2}}{4 + 16 \\pi^{2}} + \\frac{8.0 \\pi}{4 + 16 \\pi^{2}}\\right) \\sin{\\left(4 \\pi y \\right)} + \\left(\\frac{10.0 \\pi}{4 + 25 \\pi^{2}} + \\frac{10.0 \\pi e^{2}}{4 + 25 \\pi^{2}}\\right) \\sin{\\left(5 \\pi y \\right)}$"
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Graficar la función y su aproximación de Fourier\n",
        "p = plot(f, serie_senos, (x, -1, 1), show=False, legend=True)\n",
        "p[0].label = 'f(x)'\n",
        "p[1].label = f'Serie de Fourier (n={N})'\n",
        "p.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "1DCaJs_36qxC",
        "outputId": "b97e08fb-b397-4413-ea3c-ed0f0ad8ad35"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Too many free symbols.\nExpected 1 free symbols.\nReceived 2: {x, y}",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-118-78a516a274dc>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Graficar la función y su aproximación de Fourier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mserie_senos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlegend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'f(x)'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf'Serie de Fourier (n={N})'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sympy/plotting/plot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(show, *args, **kwargs)\u001b[0m\n\u001b[1;32m    396\u001b[0m     \"\"\"\n\u001b[1;32m    397\u001b[0m     \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_plot_sympify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 398\u001b[0;31m     \u001b[0mplot_expr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_arguments\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    399\u001b[0m     \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"params\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    400\u001b[0m     \u001b[0mfree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sympy/plotting/utils.py\u001b[0m in \u001b[0;36m_check_arguments\u001b[0;34m(args, nexpr, npar, **kwargs)\u001b[0m\n\u001b[1;32m    264\u001b[0m         \u001b[0mexprs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mranges\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrendering_kw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_unpack_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m         \u001b[0mfree_symbols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfree_symbols\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0me\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mexprs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 266\u001b[0;31m         \u001b[0mranges\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_create_ranges\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexprs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mranges\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnpar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    267\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    268\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnexpr\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sympy/plotting/utils.py\u001b[0m in \u001b[0;36m_create_ranges\u001b[0;34m(exprs, ranges, npar, label, params)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfree_symbols\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mnpar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    116\u001b[0m             \u001b[0;34m\"Too many free symbols.\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m             \u001b[0;34m+\u001b[0m \u001b[0;34m\"Expected {} free symbols.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnpar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Too many free symbols.\nExpected 1 free symbols.\nReceived 2: {x, y}"
          ]
        }
      ]
    }
  ]
}